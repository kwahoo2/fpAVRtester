
FixedPtOps.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000002de  00000372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006e  0080006e  00000380  2**0
                  ALLOC
  3 .stab         000000cc  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000001b  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000467  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000005ce  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002d0  00000000  00000000  00000a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000191  00000000  00000000  00000d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000128  00000000  00000000  00000ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001b2  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000046c  00000000  00000000  000011ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00001636  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ed       	ldi	r30, 0xDE	; 222
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ae 36       	cpi	r26, 0x6E	; 110
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ae e6       	ldi	r26, 0x6E	; 110
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 37       	cpi	r26, 0x74	; 116
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	07 d1       	rcall	.+526    	; 0x268 <main>
  5a:	3f c1       	rjmp	.+638    	; 0x2da <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <divfix>:
// divide two fixed 8:8 numbers 
#define divfixSlow(a,b)  ((int)((((long)(a))<<8)/((long)(b))))

//========================================================
int divfix(int nn, int dd)
{
  5e:	8f 92       	push	r8
  60:	9f 92       	push	r9
  62:	bf 92       	push	r11
  64:	cf 92       	push	r12
  66:	df 92       	push	r13
  68:	ef 92       	push	r14
  6a:	ff 92       	push	r15
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
  74:	1f 92       	push	r1
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	6c 01       	movw	r12, r24
  7c:	4b 01       	movw	r8, r22
    count = 0;
    neg = 0 ; 
    d = dd ;
    
    // only works with + numbers
    if (d & 0x8000)
  7e:	77 ff       	sbrs	r23, 7
  80:	05 c0       	rjmp	.+10     	; 0x8c <divfix+0x2e>
    {
        neg = 1;
        d = -d ;
  82:	91 94       	neg	r9
  84:	81 94       	neg	r8
  86:	91 08       	sbc	r9, r1
    d = dd ;
    
    // only works with + numbers
    if (d & 0x8000)
    {
        neg = 1;
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	01 c0       	rjmp	.+2      	; 0x8e <divfix+0x30>
int divfix(int nn, int dd)
{
    int x, d ;
    signed char count, neg ;
    count = 0;
    neg = 0 ; 
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	b1 2c       	mov	r11, r1
        neg = 1;
        d = -d ;
    }
    
    // range reduction
    while (d>0x0100)
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	82 16       	cp	r8, r18
  94:	92 06       	cpc	r9, r18
  96:	24 f0       	brlt	.+8      	; 0xa0 <divfix+0x42>
  98:	ba 94       	dec	r11
    {
        --count ;
        d >>= 1 ;
  9a:	95 94       	asr	r9
  9c:	87 94       	ror	r8
  9e:	f8 cf       	rjmp	.-16     	; 0x90 <divfix+0x32>
  a0:	c4 01       	movw	r24, r8
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
    }
    
    while (d<0x0080)
  a6:	60 e8       	ldi	r22, 0x80	; 128
  a8:	86 16       	cp	r8, r22
  aa:	91 04       	cpc	r9, r1
  ac:	1c f4       	brge	.+6      	; 0xb4 <divfix+0x56>
  ae:	b3 94       	inc	r11
    {
        ++count ;
        d <<= 1 ;
  b0:	4c 01       	movw	r8, r24
  b2:	f6 cf       	rjmp	.-20     	; 0xa0 <divfix+0x42>
    }
     
    // Newton interation
    x = 0x02ea - (d<<1) ;
  b4:	0a ee       	ldi	r16, 0xEA	; 234
  b6:	12 e0       	ldi	r17, 0x02	; 2
  b8:	08 1b       	sub	r16, r24
  ba:	19 0b       	sbc	r17, r25
    x = multfix(x, 0x0200-multfix(d,x));
  bc:	b8 01       	movw	r22, r16
  be:	c4 01       	movw	r24, r8
  c0:	49 83       	std	Y+1, r20	; 0x01
  c2:	c4 d0       	rcall	.+392    	; 0x24c <multfix>
  c4:	e1 2c       	mov	r14, r1
  c6:	22 e0       	ldi	r18, 0x02	; 2
  c8:	f2 2e       	mov	r15, r18
  ca:	b7 01       	movw	r22, r14
  cc:	68 1b       	sub	r22, r24
  ce:	79 0b       	sbc	r23, r25
  d0:	c8 01       	movw	r24, r16
  d2:	bc d0       	rcall	.+376    	; 0x24c <multfix>
  d4:	8c 01       	movw	r16, r24
    x = multfix(x, 0x0200-multfix(d,x)); 
  d6:	bc 01       	movw	r22, r24
  d8:	c4 01       	movw	r24, r8
  da:	b8 d0       	rcall	.+368    	; 0x24c <multfix>
  dc:	b7 01       	movw	r22, r14
  de:	68 1b       	sub	r22, r24
  e0:	79 0b       	sbc	r23, r25
  e2:	c8 01       	movw	r24, r16
  e4:	b3 d0       	rcall	.+358    	; 0x24c <multfix>

    
    // range expansion
    if (count>0)  x = x<<count ;
  e6:	49 81       	ldd	r20, Y+1	; 0x01
  e8:	1b 14       	cp	r1, r11
  ea:	34 f4       	brge	.+12     	; 0xf8 <divfix+0x9a>
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <divfix+0x94>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	ba 94       	dec	r11
  f4:	e2 f7       	brpl	.-8      	; 0xee <divfix+0x90>
  f6:	0d c0       	rjmp	.+26     	; 0x112 <divfix+0xb4>
    else if (count<0) x = x>>(-count) ;  
  f8:	bb 20       	and	r11, r11
  fa:	59 f0       	breq	.+22     	; 0x112 <divfix+0xb4>
  fc:	eb 2d       	mov	r30, r11
  fe:	ff 27       	eor	r31, r31
 100:	e1 95       	neg	r30
 102:	0c f4       	brge	.+2      	; 0x106 <divfix+0xa8>
 104:	f0 95       	com	r31
 106:	0e 2e       	mov	r0, r30
 108:	02 c0       	rjmp	.+4      	; 0x10e <divfix+0xb0>
 10a:	95 95       	asr	r25
 10c:	87 95       	ror	r24
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <divfix+0xac>
    
    // fix sign
    if (neg==1) x=-x;
 112:	41 30       	cpi	r20, 0x01	; 1
 114:	19 f4       	brne	.+6      	; 0x11c <divfix+0xbe>
 116:	91 95       	neg	r25
 118:	81 95       	neg	r24
 11a:	91 09       	sbc	r25, r1
    
    //form ratio
    x = multfix(x,nn) ;  
 11c:	b6 01       	movw	r22, r12
     
    return x ;  
}
 11e:	0f 90       	pop	r0
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	ff 90       	pop	r15
 12a:	ef 90       	pop	r14
 12c:	df 90       	pop	r13
 12e:	cf 90       	pop	r12
 130:	bf 90       	pop	r11
 132:	9f 90       	pop	r9
 134:	8f 90       	pop	r8
    
    // fix sign
    if (neg==1) x=-x;
    
    //form ratio
    x = multfix(x,nn) ;  
 136:	8a c0       	rjmp	.+276    	; 0x24c <multfix>

00000138 <sqrtfix>:
    return x ;  
}

//========================================================
int sqrtfix(int aa)
{
 138:	ef 92       	push	r14
 13a:	ff 92       	push	r15
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	00 d0       	rcall	.+0      	; 0x146 <sqrtfix+0xe>
 146:	1f 92       	push	r1
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	8c 01       	movw	r16, r24
    a = aa; 
    ahigh = a>>8 ;
    //
    // range sort to get integer part and to
    // check for weird bits near the top of the range
    if (ahigh >= 0x40)     //bigger than 64?
 14e:	10 34       	cpi	r17, 0x40	; 64
 150:	68 f0       	brcs	.+26     	; 0x16c <sqrtfix+0x34>
    {
        if (a > 0x7e8f)    //>=126.562 = 11.25^2
 152:	00 39       	cpi	r16, 0x90	; 144
 154:	9e e7       	ldi	r25, 0x7E	; 126
 156:	19 07       	cpc	r17, r25
 158:	a4 f4       	brge	.+40     	; 0x182 <sqrtfix+0x4a>
        {
            root = 0x0b40;  // 11
            nextbit = 0x10 ;
        } 
        else if (ahigh >= 0x79)    //>=121
 15a:	19 37       	cpi	r17, 0x79	; 121
 15c:	b0 f4       	brcc	.+44     	; 0x18a <sqrtfix+0x52>
        {
            root = 0x0b00;  // 11
            nextbit = 0x40 ;
        }
        else if (ahigh >= 0x64)    //>=100
 15e:	14 36       	cpi	r17, 0x64	; 100
 160:	c0 f4       	brcc	.+48     	; 0x192 <sqrtfix+0x5a>
        {
            root = 0x0a00;  // 10
            nextbit = 0x80 ;
        }  
        else if (ahigh >= 0x51)    //>=81
 162:	11 35       	cpi	r17, 0x51	; 81
 164:	c8 f0       	brcs	.+50     	; 0x198 <sqrtfix+0x60>
        {
            root = 0x0900;  // 9
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	59 e0       	ldi	r21, 0x09	; 9
 16a:	33 c0       	rjmp	.+102    	; 0x1d2 <sqrtfix+0x9a>
        {
            root = 0x0800;      //8
            nextbit = 0x80 ; 
        } 
    }
    else if  (ahigh >= 0x10)  //16    //smaller than 64 and bigger then 16
 16c:	10 31       	cpi	r17, 0x10	; 16
 16e:	00 f1       	brcs	.+64     	; 0x1b0 <sqrtfix+0x78>
    { 
        if (ahigh >= 0x31)  //49
 170:	11 33       	cpi	r17, 0x31	; 49
 172:	a8 f4       	brcc	.+42     	; 0x19e <sqrtfix+0x66>
        {
            root = 0x0700;      //7
            nextbit = 0x80 ; 
        }
        else if (ahigh >= 0x24)  //36
 174:	14 32       	cpi	r17, 0x24	; 36
 176:	b0 f4       	brcc	.+44     	; 0x1a4 <sqrtfix+0x6c>
        {
            root = 0x0600;      //6
            nextbit = 0x80 ; 
        }
        else if (ahigh >= 0x19)  //25
 178:	19 31       	cpi	r17, 0x19	; 25
 17a:	b8 f0       	brcs	.+46     	; 0x1aa <sqrtfix+0x72>
        {
            root = 0x0500;      //5
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	55 e0       	ldi	r21, 0x05	; 5
 180:	28 c0       	rjmp	.+80     	; 0x1d2 <sqrtfix+0x9a>
    // check for weird bits near the top of the range
    if (ahigh >= 0x40)     //bigger than 64?
    {
        if (a > 0x7e8f)    //>=126.562 = 11.25^2
        {
            root = 0x0b40;  // 11
 182:	40 e4       	ldi	r20, 0x40	; 64
 184:	5b e0       	ldi	r21, 0x0B	; 11
            nextbit = 0x10 ;
 186:	20 e1       	ldi	r18, 0x10	; 16
 188:	25 c0       	rjmp	.+74     	; 0x1d4 <sqrtfix+0x9c>
        } 
        else if (ahigh >= 0x79)    //>=121
        {
            root = 0x0b00;  // 11
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	5b e0       	ldi	r21, 0x0B	; 11
            nextbit = 0x40 ;
 18e:	20 e4       	ldi	r18, 0x40	; 64
 190:	21 c0       	rjmp	.+66     	; 0x1d4 <sqrtfix+0x9c>
        }
        else if (ahigh >= 0x64)    //>=100
        {
            root = 0x0a00;  // 10
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	5a e0       	ldi	r21, 0x0A	; 10
 196:	1d c0       	rjmp	.+58     	; 0x1d2 <sqrtfix+0x9a>
            root = 0x0900;  // 9
            nextbit = 0x80 ;
        } 
        else   //64
        {
            root = 0x0800;      //8
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	58 e0       	ldi	r21, 0x08	; 8
 19c:	1a c0       	rjmp	.+52     	; 0x1d2 <sqrtfix+0x9a>
    }
    else if  (ahigh >= 0x10)  //16    //smaller than 64 and bigger then 16
    { 
        if (ahigh >= 0x31)  //49
        {
            root = 0x0700;      //7
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	57 e0       	ldi	r21, 0x07	; 7
 1a2:	17 c0       	rjmp	.+46     	; 0x1d2 <sqrtfix+0x9a>
            nextbit = 0x80 ; 
        }
        else if (ahigh >= 0x24)  //36
        {
            root = 0x0600;      //6
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	56 e0       	ldi	r21, 0x06	; 6
 1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <sqrtfix+0x9a>
            root = 0x0500;      //5
            nextbit = 0x80 ; 
        }   
        else //16
        {
            root = 0x0400;      //4
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	54 e0       	ldi	r21, 0x04	; 4
 1ae:	11 c0       	rjmp	.+34     	; 0x1d2 <sqrtfix+0x9a>
            nextbit = 0x80 ; 
        }
    }  
    else       //smaller than 16
    { 
         if (ahigh >= 0x09)  //9
 1b0:	19 30       	cpi	r17, 0x09	; 9
 1b2:	18 f0       	brcs	.+6      	; 0x1ba <sqrtfix+0x82>
        {
            root = 0x0300;      //3
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	53 e0       	ldi	r21, 0x03	; 3
 1b8:	0c c0       	rjmp	.+24     	; 0x1d2 <sqrtfix+0x9a>
            nextbit = 0x80 ; 
        } 
        else if (ahigh >= 0x04)  //4
 1ba:	14 30       	cpi	r17, 0x04	; 4
 1bc:	18 f0       	brcs	.+6      	; 0x1c4 <sqrtfix+0x8c>
        {
            root = 0x0200;      //2
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	52 e0       	ldi	r21, 0x02	; 2
 1c2:	07 c0       	rjmp	.+14     	; 0x1d2 <sqrtfix+0x9a>
            nextbit = 0x80 ; 
        }
        else if (ahigh >= 0x01)  //1
 1c4:	11 11       	cpse	r17, r1
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <sqrtfix+0x96>
            root = 0x0100;      //1
            nextbit = 0x80 ; 
        }  
        else     //less than one
        {
            root = 0;
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <sqrtfix+0x9a>
            root = 0x0200;      //2
            nextbit = 0x80 ; 
        }
        else if (ahigh >= 0x01)  //1
        {
            root = 0x0100;      //1
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	51 e0       	ldi	r21, 0x01	; 1
            nextbit = 0x80 ; 
 1d2:	20 e8       	ldi	r18, 0x80	; 128
        }
    }
    // now get the low order bits  
    while (nextbit)
    {
		root = nextbit + root;
 1d4:	7a 01       	movw	r14, r20
 1d6:	e2 0e       	add	r14, r18
 1d8:	f1 1c       	adc	r15, r1
		p =  multfix(root,root);  
 1da:	b7 01       	movw	r22, r14
 1dc:	c7 01       	movw	r24, r14
 1de:	2b 83       	std	Y+3, r18	; 0x03
 1e0:	49 83       	std	Y+1, r20	; 0x01
 1e2:	5a 83       	std	Y+2, r21	; 0x02
 1e4:	33 d0       	rcall	.+102    	; 0x24c <multfix>
        if (p >= a) root = root - nextbit ;
 1e6:	2b 81       	ldd	r18, Y+3	; 0x03
 1e8:	49 81       	ldd	r20, Y+1	; 0x01
 1ea:	5a 81       	ldd	r21, Y+2	; 0x02
 1ec:	80 17       	cp	r24, r16
 1ee:	91 07       	cpc	r25, r17
 1f0:	0c f4       	brge	.+2      	; 0x1f4 <sqrtfix+0xbc>
        }
    }
    // now get the low order bits  
    while (nextbit)
    {
		root = nextbit + root;
 1f2:	a7 01       	movw	r20, r14
		p =  multfix(root,root);  
        if (p >= a) root = root - nextbit ;
    	nextbit = nextbit>>1 ;
 1f4:	26 95       	lsr	r18
            root = 0;
            nextbit = 0x80 ;  
        }
    }
    // now get the low order bits  
    while (nextbit)
 1f6:	71 f7       	brne	.-36     	; 0x1d4 <sqrtfix+0x9c>
		p =  multfix(root,root);  
        if (p >= a) root = root - nextbit ;
    	nextbit = nextbit>>1 ;
    }
    return root ;  
}
 1f8:	ca 01       	movw	r24, r20
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	ff 90       	pop	r15
 20a:	ef 90       	pop	r14
 20c:	08 95       	ret

0000020e <usart_init>:

void usart_init( uint16_t ubrr) {

    // Set baud rate

    UBRRH = (uint8_t)(ubrr>>8);
 20e:	90 bd       	out	0x20, r25	; 32
    UBRRL = (uint8_t)ubrr;
 210:	89 b9       	out	0x09, r24	; 9

    // Enable receiver and transmitter

    UCSRB = (1<<RXEN)|(1<<TXEN);
 212:	88 e1       	ldi	r24, 0x18	; 24
 214:	8a b9       	out	0x0a, r24	; 10

    // Set frame format: 8data, 1stop bit

    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 216:	86 e8       	ldi	r24, 0x86	; 134
 218:	80 bd       	out	0x20, r24	; 32
 21a:	08 95       	ret

0000021c <usart_putchar>:

void usart_putchar(char data) {

    // Wait for empty transmit buffer

    while ( !(UCSRA & (_BV(UDRE))) );
 21c:	5d 9b       	sbis	0x0b, 5	; 11
 21e:	fe cf       	rjmp	.-4      	; 0x21c <usart_putchar>

    // Start transmission

    UDR = data;
 220:	8c b9       	out	0x0c, r24	; 12
 222:	08 95       	ret

00000224 <usart_getchar>:
}
char usart_getchar(void) {

    // Wait for incoming data

    while ( !(UCSRA & (_BV(RXC))) );
 224:	5f 9b       	sbis	0x0b, 7	; 11
 226:	fe cf       	rjmp	.-4      	; 0x224 <usart_getchar>

    // Return the data

    return UDR;
 228:	8c b1       	in	r24, 0x0c	; 12
}
 22a:	08 95       	ret

0000022c <usart_kbhit>:

    //return nonzero if char waiting polled version

    unsigned char b;
    b=0;
    if(UCSRA & (1<<RXC)) b=1;
 22c:	8b b1       	in	r24, 0x0b	; 11
    return b;
}
 22e:	88 1f       	adc	r24, r24
 230:	88 27       	eor	r24, r24
 232:	88 1f       	adc	r24, r24
 234:	08 95       	ret

00000236 <usart_pstr>:

void usart_pstr(char *s) {
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	ec 01       	movw	r28, r24

    // loop through entire string

    while (*s) {
 23c:	89 91       	ld	r24, Y+
 23e:	88 23       	and	r24, r24
 240:	11 f0       	breq	.+4      	; 0x246 <usart_pstr+0x10>
        usart_putchar(*s);
 242:	ec df       	rcall	.-40     	; 0x21c <usart_putchar>
 244:	fb cf       	rjmp	.-10     	; 0x23c <usart_pstr+0x6>
        s++;
    }
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <multfix>:
multfix:
	;input parameters are in r23:r22(hi:lo) and r25:r24
	  
  	;b aready in right place -- 2nd parameter is in r22:23											

    mov  r20,r24 ;load a -- first parameter is in r24:25 
 24c:	48 2f       	mov	r20, r24
	mov  r21,r25											
 24e:	59 2f       	mov	r21, r25

	muls r23, r21	; (signed)ah * (signed)bh		
 250:	75 02       	muls	r23, r21
	mov	 r25, r0         ;r18, r0"						
 252:	90 2d       	mov	r25, r0
	mul	 r22, r20		; al * bl"						
 254:	64 9f       	mul	r22, r20
	mov  r24, r1      ;movw	r17:r16, r1:r0"		
 256:	81 2d       	mov	r24, r1
											
	mulsu r23, r20	; (signed)ah * bl				
 258:	74 03       	mulsu	r23, r20
	add	 r24, r0         ;r17, r0"						
 25a:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"	
 25c:	91 1d       	adc	r25, r1
						
	mulsu r21, r22	; (signed)bh * al				
 25e:	56 03       	mulsu	r21, r22
	add	 r24, r0         ;r17, r0"					
 260:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"						
 262:	91 1d       	adc	r25, r1
											
	clr  r1   			; required by GCC								
 264:	11 24       	eor	r1, r1
	
	;return values are in 25:r24 (hi:lo)		 								
 	ret
 266:	08 95       	ret

00000268 <main>:
volatile int fix0, fix1, prod ; 

int main(void)
{  
  //init the UART -- uart_init() is in uart.c
  usart_init ( MYUBRR );
 268:	83 e3       	ldi	r24, 0x33	; 51
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	d0 df       	rcall	.-96     	; 0x20e <usart_init>
  sei();
 26e:	78 94       	sei
  while(1)
  {
  
    // fixed input
    unsigned char f00 = usart_getchar();
 270:	d9 df       	rcall	.-78     	; 0x224 <usart_getchar>
 272:	18 2f       	mov	r17, r24
    unsigned char f01 = usart_getchar();
 274:	d7 df       	rcall	.-82     	; 0x224 <usart_getchar>
 276:	d8 2f       	mov	r29, r24
    unsigned char f10 = usart_getchar();
 278:	d5 df       	rcall	.-86     	; 0x224 <usart_getchar>
 27a:	c8 2f       	mov	r28, r24
    unsigned char f11 = usart_getchar();
 27c:	d3 df       	rcall	.-90     	; 0x224 <usart_getchar>
    
    fix0 = ((int)f00 << 8) + ((int)f01);
 27e:	41 2f       	mov	r20, r17
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	54 2f       	mov	r21, r20
 284:	44 27       	eor	r20, r20
 286:	4d 0f       	add	r20, r29
 288:	51 1d       	adc	r21, r1
 28a:	50 93 73 00 	sts	0x0073, r21
 28e:	40 93 72 00 	sts	0x0072, r20
    fix1 = ((int)f10 << 8) + ((int)f11);
 292:	2c 2f       	mov	r18, r28
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	32 2f       	mov	r19, r18
 298:	22 27       	eor	r18, r18
 29a:	28 0f       	add	r18, r24
 29c:	31 1d       	adc	r19, r1
 29e:	30 93 71 00 	sts	0x0071, r19
 2a2:	20 93 70 00 	sts	0x0070, r18
    
    // test multiply 
    prod = multfix(fix0, fix1) ;
 2a6:	60 91 70 00 	lds	r22, 0x0070
 2aa:	70 91 71 00 	lds	r23, 0x0071
 2ae:	80 91 72 00 	lds	r24, 0x0072
 2b2:	90 91 73 00 	lds	r25, 0x0073
 2b6:	ca df       	rcall	.-108    	; 0x24c <multfix>
 2b8:	90 93 6f 00 	sts	0x006F, r25
 2bc:	80 93 6e 00 	sts	0x006E, r24
    unsigned char out0 = (unsigned char)((prod >> 8) & 0xFF);
 2c0:	80 91 6e 00 	lds	r24, 0x006E
 2c4:	90 91 6f 00 	lds	r25, 0x006F
    unsigned char out1 = (unsigned char)(prod & 0xFF);
 2c8:	c0 91 6e 00 	lds	r28, 0x006E
 2cc:	d0 91 6f 00 	lds	r29, 0x006F
    
    usart_putchar(out0);
 2d0:	89 2f       	mov	r24, r25
 2d2:	a4 df       	rcall	.-184    	; 0x21c <usart_putchar>
    usart_putchar(out1);
 2d4:	8c 2f       	mov	r24, r28
 2d6:	a2 df       	rcall	.-188    	; 0x21c <usart_putchar>
 2d8:	cb cf       	rjmp	.-106    	; 0x270 <main+0x8>

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
